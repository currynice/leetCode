package com.cxy.leetCode.array;

/**
 * 跳跃游戏
 * 一给定一个非负整数数组，你最初位于数组的第一个位置。
 *
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 *
 * 判断你是否能够到达最后一个位置。
 *
 * 示例 1:
 *
 * 输入: [2,3,1,1,4]
 * 输出: true
 * 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 * 示例 2:
 *
 * 输入: [3,2,1,0,4]
 * 输出: false
 * 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置
 *
 */
public class JumpGame55 {

    /**
     * 方法一：贪心
     * 对于数组中的任意一个位置 y，只要存在一个位置 x，它本身可以到达，它跳跃的最大长度为 x + x+nums[x]，这个值大于等于 y，即 x + nums[x] ≥y，那么位置y可以到达。
     *
     * 对于每一个可以到达的位置 x，其 x+1,x+2,⋯,x+nums[x] 这些连续的位置都可以到达。
     *
     * 依次遍历数组中的每一个位置，并实时维护最远可以到达的位置。对于当前遍历到的位置 x，如果它在 最远可以到达的位置 的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，可以用 x+nums[x] 更新 最远可以到达的位置。
     *
     * 在遍历的过程中，如果 最远可以到达的位置 大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回 True 作为答案。反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 作为答案。
     *
     * 以题目中的示例一
     *
     * [2, 3, 1, 1, 4]
     * 为例：
     *
     * 我们一开始在位置 0，可以跳跃的最大长度为 2，因此最远可以到达的位置被更新为 2；
     *
     * 我们遍历到位置 1，由于 1≤2，因此位置 1 可达。将最远可以到达的位置更新为 4。由于 4 大于等于最后一个位置 4，因此我们直接返回 True。
     *
     * 我们再来看看题目中的示例二
     *
     * [3, 2, 1, 0, 4]
     * 我们一开始在位置0，可以跳跃的最大长度为 3，因此最远可以到达的位置被更新为 3；
     *
     * 我们遍历到位置 1，由于1≤3，因此位置 1 可达，加上它可以跳跃的最大长度 2 得到 3，没有超过最远可以到达的位置；
     *
     * 位置 2位置 3同理，最远可以到达的位置不会被更新；
     *
     * 遍历到位置 4，由于4>3，因此位置 4 不可达，我们也就不考虑它可以跳跃的最大长度了。
     *
     * 在遍历完成之后，位置 4 仍然不可达，因此我们返回 False。
     *
     *
     */
 
    public boolean canJump(int[] nums) {
        int maxposition = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > maxposition) break;
            maxposition = Math.max(maxposition, i + nums[i]);
        }
        return maxposition >= nums.length - 1;
    }
}
